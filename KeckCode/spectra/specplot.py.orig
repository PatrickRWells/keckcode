import pylab,scipy,pyfits,special_functions


class SpecPlot:

	def __init__(self,file):
		f = pyfits.open(file)
		self.position = f[0].header['center']
		self.pos = self.position
		self.width = f[0].header['width']
		self.filename = file
		self.rawdata = f[1].data.copy()
		self.current = f[2].data.copy()
		self.varspec = f[3].data.copy()
		f.close()
		self.wave = wavelength(file,1)
		tmp = scipy.where(self.rawdata!=0)[0]
		left = tmp.min()
		right = tmp.max()+1
		self.current = self.current[left:right]
		self.varspec = self.varspec[left:right]
		self.wave = self.wave[left:right]
		self.rawdata = self.rawdata[left:right]

		self.linelist = [2344,2374,2383,2587,2600.,2750.3,2795.,2802.7,2852,3727.,3835.38,3889.05,3933.66,3968.47,4101.74,4305.,4340.47,4861.33,4962.,5007.,5177.,5270.,5890.,6563.,6585.,6725.]
		self.collect = []

		self.skyid = None

		self.z = 0.

		self.axes = None
		self.redraw()
		self.axes.fmt_xdata = pylab.FormatStrFormatter("%4.2f")

	def redshift(self, z):
		lines = self.linelist

		names = ['Fe','','Fe','Fe','','FeII','','MgII','MgI',"[OII]",'Heta','','CaK','CaH','H-delta','Gband','H-gamma','H-beta','OIII','OIII','Mgb','Fe','NaII','H-alpha','N','S']
		self.axes.texts = []
		axis = self.axes.axis()
		if self.skyid==None:
			pass
		else:
			sky = self.axes.lines[self.skyid]
		self.axes.lines = [self.axes.lines[0]]
		if self.skyid==None:
			pass
		else:
			self.axes.lines.append(sky)
			self.skyid = 1
		for i in range(len(lines)):
			wave = lines[i]
			wave *= (1.+z)
			if wave>axis[1] or wave<axis[0]:
				continue
			pylab.axvline(wave,color='black')
			pylab.text(wave,axis[3],names[i],rotation=60)
		lines = [4383,4455,4531]
		for i in range(len(lines)):
			wave = lines[i]*(1.+z)
			if wave>axis[1] or wave<axis[0]:
				continue
			pylab.axvline(wave,color='red')
		self.z = z

	def id(self,wave,feature):
		# Get closest feature to input value
		lines = scipy.asarray(self.linelist)
		diff = abs(lines-feature)
		if diff.min()<3.:
			feature = lines[diff.argmin()]

		disp = self.wave[1]-self.wave[0]
		indx = scipy.where(abs(wave-self.wave)<disp)[0][0]
		if indx<5 or indx>self.wave.size-4:
			self.lineid(wave,feature)
			return
		fitdata = scipy.empty((11,2))
		fitdata[:,0] = self.wave[indx-5:indx+6]
		fitdata[:,1] = self.current[indx-5:indx+6]

		fit = scipy.zeros(4)
		fit[1] = self.current[indx]
		fit[2] = wave
		fit[3] = 2.

		fit,chi2 = special_functions.ngaussfit(fitdata,fit)
		if abs(fit[2]-wave)>5.:
			self.lineid(wave,feature)
		else:
			self.lineid(fit[2],feature)
		self.collect.append(self.z)

	def erase_z(self):
		self.collect = []

	def get_z(self):
		if len(self.collect)==0:
			return self.z
		return scipy.asarray(self.collect).mean()

	def get_z_err(self):
		if len(self.collect)<2:
			return 0.
		return scipy.asarray(self.collect).std()

	def lineid(self,wave,feature):
		z = (float(wave)/feature)-1.
		print "wave = %7.2f, z = %2.6f" % (wave,z)
		self.redshift(z)

	def smooth(self,width=11):
		from scipy import signal
		var = self.varspec.copy()
		var[var<=0] = 1.
		var[scipy.isnan(var)] = 1.
		self.current = signal.wiener(self.current,width,var)
		self.axes.lines[0].set_ydata(self.current)
		pylab.draw()

	def close(self):
		pylab.close()

	def plot(self):
		pylab.close()
		pylab.plot(self.wave,self.current)
		pylab.show()
		self.axes = pylab.gca()
		self.axes.fmt_xdata = pylab.FormatStrFormatter("%4.2f")

	def sky(self):
		if self.skyid is None:
			skymax = scipy.nanmax(self.varspec)
			scimax = scipy.nanmax(self.current)
			scimin = scipy.nanmin(self.current)
			spec = self.varspec*scimax/skymax - abs(scimin)
			self.skyid = len(self.axes.lines)
			pylab.plot(self.wave,spec,color='green')
		else:
			self.axes.lines.remove(self.axes.lines[self.skyid])
			self.skyid = None
			pylab.draw()

	def redraw(self):
		self.current = self.rawdata.copy()
		self.plot()
		self.axes = pylab.gca()
		self.skyid = None

	def clear(self):
		self.axes.texts = []
		self.axes.lines = [self.axes.lines[0]]
		pylab.draw()
		self.skyid = None

def parse_hdr(header):
	crval = header['crval1']
	try:
		crpix = header['crpix1']
	except:
		crpix = 1
	log = 0
	try:
		cd = header['cd1_1']
	except:
		cd = header['cdelt1']
	try:
		log = header['dc-flag']
	except:
		try:
			tmp = header['WFITTYPE']
			if tmp=='LOG_LINEAR':
				log = 1
		except:
			pass
	return [crval,crpix,cd,log]


def wavelength(filename,ext=0):
	f = pyfits.open(filename)
	hdr = f[ext].header

	hdr_info = parse_hdr(hdr)
	crval = hdr_info[0]
	crpix = hdr_info[1]
	cd = hdr_info[2]
	islog = hdr_info[3]
	npix = hdr['NAXIS1']

	start = crval+(1.-crpix)*cd
	wave = scipy.arange(start,start+npix*cd,cd)
	if islog:
		wave = scipy.power(10.,wave)
	return wave[0:npix]
